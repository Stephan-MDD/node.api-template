import { __PascalCase__Service } from '../Services';
import { HttpCodes } from '../Enums';
import { __PascalCase__ } from '../Entities';

describe('Function getAll', () => {
	test('Should return __PascalCase__[]', async () => {
		// arrange
		const expectedData: __PascalCase__[] = null;
		const expectedStatus: HttpCodes = HttpCodes.Ok;
		const expectedMessage: string = '';

		// act
		const actual = await __PascalCase__Service.getAll();

		// assert
		expect(expectedData).toBe(actual.data);
		expect(expectedStatus).toBe(actual.status);
		expect(expectedMessage).toBe(actual.message);
	});
});

describe('Function getSingle', () => {
	test('Should return __PascalCase__', async () => {
		// arrange
		const __camelCase__Id = 1;

		const expectedData: __PascalCase__ = null;
		const expectedStatus: HttpCodes = HttpCodes.Ok;
		const expectedMessage: string = '';

		// act
		const actual = await __PascalCase__Service.getSingle(__camelCase__Id);

		// assert
		expect(expectedData).toBe(actual.data);
		expect(expectedStatus).toBe(actual.status);
		expect(expectedMessage).toBe(actual.message);
	});

	describe('Error Handling', () => {
		test('should throw Error', () => {
			// arrange
			const __camelCase__Id = -1;

			// act
			const action = async () => {
				await __PascalCase__Service.getSingle(__camelCase__Id);
			};

			// assert
			expect(action).rejects.toThrow(Error);
		});
	});
});

describe('Function addSingle', () => {
	test('Should add __PascalCase__', async () => {
		// arrange
		const __camelCase__: __PascalCase__ = new __PascalCase__();

		const expectedData: __PascalCase__ = null;
		const expectedStatus: HttpCodes = HttpCodes.Ok;
		const expectedMessage: string = '';

		// act
		const actual = await __PascalCase__Service.addSingle(__camelCase__);

		// assert
		expect(expectedData).toBe(actual.data);
		expect(expectedStatus).toBe(actual.status);
		expect(expectedMessage).toBe(actual.message);
	});

	describe('Error Handling', () => {
		test('should throw Error', () => {
			// arrange
			const __camelCase__: __PascalCase__ = new __PascalCase__();

			// act
			const action = async () => {
				await __PascalCase__Service.addSingle(__camelCase__);
			};

			// assert
			expect(action).rejects.toThrow(Error);
		});
	});
});

describe('Function updateSingle', () => {
	test('Should update __PascalCase__', async () => {
		// arrange
		const __camelCase__Id: number = 1;
		const __camelCase__: __PascalCase__ = new __PascalCase__();

		const expectedData: __PascalCase__ = null;
		const expectedStatus: HttpCodes = HttpCodes.Ok;
		const expectedMessage: string = '';

		// act
		const actual = await __PascalCase__Service.updateSingle(__camelCase__Id, __camelCase__);

		// assert
		expect(expectedData).toBe(actual.data);
		expect(expectedStatus).toBe(actual.status);
		expect(expectedMessage).toBe(actual.message);
	});

	describe('Error Handling', () => {
		test('should throw Error', () => {
			// arrange
			const __camelCase__Id: number = -1;
			const __camelCase__: __PascalCase__ = new __PascalCase__();

			// act
			const action = async () => {
				await __PascalCase__Service.updateSingle(__camelCase__Id, __camelCase__);
			};

			// assert
			expect(action).rejects.toThrow(Error);
		});
	});
});

describe('Function deleteSingle', () => {
	test('Should delete __PascalCase__', async () => {
		// arrange
		const __camelCase__Id: number = 1;

		const expectedData: __PascalCase__ = null;
		const expectedStatus: HttpCodes = HttpCodes.Ok;
		const expectedMessage: string = '';

		// act
		const actual = await __PascalCase__Service.deleteSingle(__camelCase__Id);

		// assert
		expect(expectedData).toBe(actual.data);
		expect(expectedStatus).toBe(actual.status);
		expect(expectedMessage).toBe(actual.message);
	});

	describe('Error Handling', () => {
		test('should throw Error', () => {
			// arrange
			const __camelCase__Id: number = -1;

			// act
			const action = async () => {
				await __PascalCase__Service.deleteSingle(__camelCase__Id);
			};

			// assert
			expect(action).rejects.toThrow(Error);
		});
	});
});
